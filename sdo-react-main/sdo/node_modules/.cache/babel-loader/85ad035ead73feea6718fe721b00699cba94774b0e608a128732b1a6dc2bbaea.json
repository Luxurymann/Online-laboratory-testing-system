{"ast":null,"code":"// import React, { useState } from 'react';\n// import styled from 'styled-components';\n\n// // Стили для формы и элементов\n// const Form = styled.form`\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n//   gap: 45px;\n// `;\n\n// const Button = styled.button`\n//   width: 1098px;\n//   height: 75px;\n//   background-color: ${({ disabled }) => (disabled ? '#ccc' : '#FFFFFF')};\n//   color: ${({ disabled }) => (disabled ? '#999' : '#000')};\n//   cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\n//   border-radius: 10px;\n//   border-style: none;\n//   font-family: 'Montserrat';\n//   font-size: 16px;\n//   margin-bottom: 20px;\n//   transition: background-color 0.3s;\n\n//   &:hover {\n//     background-color: ${({ disabled }) => (disabled ? '#ccc' : '#E2EDD0')};\n//   }\n// `;\n\n// const Inpt = styled.input`\n//   display: none;\n// `;\n\n// const Label = styled.label`\n//   border: 2px dashed #000;\n//   height: 250px;\n//   text-align: center;\n//   border-radius: 7px;\n//   margin-top: 10px;\n//   width: 1098px;\n//   transition: background-color 0.3s;\n//   background-color: #FFFFFF;\n\n//   &:hover {\n//     background-color: #E2EDD08C;\n//   }\n// `;\n\n// const Span = styled.span`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   width: 100%;\n//   height: 100%;\n//   background-color: ${({ isDragging }) => (isDragging ? '#F5F5F5' : 'transparent')};\n//   transition: background-color 0.3s ease;\n// `;\n\n// const ProgressContainer = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: space-between;\n//   width: 1100px;\n//   margin-top: 20px;\n// `;\n\n// const ProgressBar = styled.div`\n//   flex-grow: 1;\n//   height: 30px;\n//   background-color: #fff;\n//   border-radius: 5px;\n//   margin-right: 10px;\n// `;\n\n// const ProgressFill = styled.div`\n//   height: 100%;\n//   width: ${({ progress }) => `${progress}%`};\n//   background-color: #76c7c0;\n//   border-radius: 5px;\n//   transition: width 0.3s ease;\n// `;\n\n// const ProgressText = styled.span`\n//   font-size: 16px;\n// `;\n\n// // Основной компонент для загрузки файла с прогресс-баром\n// const FileUploader = ({ file, setFile }) => {\n//   const [isDragging, setIsDragging] = useState(false);\n//   const [progress, setProgress] = useState(0); // Состояние для отслеживания прогресса\n//   const [isUploading, setIsUploading] = useState(false); // Состояние загрузки файла\n\n//   const handleChange = (e) => {\n//     if (e.target.files && e.target.files[0]) {\n//       setFile(e.target.files[0]);\n//     }\n//   };\n\n//   const handleDragEnter = (e) => {\n//     e.preventDefault();\n//     setIsDragging(true);\n//   };\n\n//   const handleDragLeave = () => {\n//     setIsDragging(false);\n//   };\n\n//   const handleDrop = (e) => {\n//     e.preventDefault();\n//     setIsDragging(false);\n\n//     if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n//       setFile(e.dataTransfer.files[0]);\n//     }\n//   };\n\n//   // Функция для отправки файла и отслеживания прогресса\n//   const handleSubmit = async () => {\n//     if (file) {\n//       setIsUploading(true); // Установка состояния загрузки файла\n\n//       // Используем FormData для передачи файла напрямую\n//       const formData = new FormData();\n//       formData.append('file', file);\n\n//       // Используем XMLHttpRequest для отслеживания прогресса загрузки\n//       const xhr = new XMLHttpRequest();\n//       xhr.open('POST', 'http://0.0.0.0:8002/check/1', true);\n\n//       // Отслеживание прогресса загрузки\n//       xhr.upload.onprogress = (event) => {\n//         if (event.lengthComputable) {\n//           const percentComplete = Math.round((event.loaded / event.total) * 100);\n//           setProgress(percentComplete); // Установка процента выполнения\n//         }\n//       };\n\n//       // Обработка завершения загрузки\n//       xhr.onload = () => {\n//         setIsUploading(false); // Завершение загрузки\n//         if (xhr.status === 200) {\n//           console.log('Загрузка успешна:', xhr.responseText);\n//         } else {\n//           console.error('Ошибка загрузки:', xhr.statusText);\n//         }\n//       };\n\n//       xhr.onerror = () => {\n//         setIsUploading(false); // Ошибка при загрузке\n//         console.error('Ошибка загрузки');\n//       };\n\n//       xhr.send(formData); // Отправка файла через FormData\n//     } else {\n//       alert('Пожалуйста, выберите файл для загрузки.');\n//     }\n//   };\n\n//   return (\n//     <Form\n//       onDragEnter={handleDragEnter}\n//       onDragOver={handleDragEnter}\n//       onDragLeave={handleDragLeave}\n//       onDrop={handleDrop}\n//     >\n//       <Label htmlFor=\"fileInput\">\n//         <Span isDragging={isDragging}>\n//           {file ? file.name : 'Загрузите файл'}\n//         </Span>\n//         <Inpt id=\"fileInput\" type=\"file\" onChange={handleChange} />\n//       </Label>\n\n//       {file && (\n//         <ProgressContainer>\n//           <ProgressBar>\n//             <ProgressFill progress={progress} />\n//           </ProgressBar>\n//           <ProgressText>{progress}%</ProgressText>\n//         </ProgressContainer>\n//       )}\n\n//       <Button\n//         type=\"button\"\n//         onClick={handleSubmit}\n//         disabled={!file || isUploading || progress < 100} // Блокируем кнопку до достижения 100%\n//       >\n//         {isUploading ? 'Загружается...' : 'Отправить на проверку'}\n//       </Button>\n//     </Form>\n//   );\n// };\n\n// export default FileUploader;","map":{"version":3,"names":[],"sources":["C:/Users/polly/Online-laboratory-testing-system/sdo-react-main/sdo/src/pages/LabaStud/Button.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import styled from 'styled-components';\r\n\r\n// // Стили для формы и элементов\r\n// const Form = styled.form`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   align-items: center;\r\n//   gap: 45px;\r\n// `;\r\n\r\n// const Button = styled.button`\r\n//   width: 1098px;\r\n//   height: 75px;\r\n//   background-color: ${({ disabled }) => (disabled ? '#ccc' : '#FFFFFF')};\r\n//   color: ${({ disabled }) => (disabled ? '#999' : '#000')};\r\n//   cursor: ${({ disabled }) => (disabled ? 'not-allowed' : 'pointer')};\r\n//   border-radius: 10px;\r\n//   border-style: none;\r\n//   font-family: 'Montserrat';\r\n//   font-size: 16px;\r\n//   margin-bottom: 20px;\r\n//   transition: background-color 0.3s;\r\n\r\n//   &:hover {\r\n//     background-color: ${({ disabled }) => (disabled ? '#ccc' : '#E2EDD0')};\r\n//   }\r\n// `;\r\n\r\n// const Inpt = styled.input`\r\n//   display: none;\r\n// `;\r\n\r\n// const Label = styled.label`\r\n//   border: 2px dashed #000;\r\n//   height: 250px;\r\n//   text-align: center;\r\n//   border-radius: 7px;\r\n//   margin-top: 10px;\r\n//   width: 1098px;\r\n//   transition: background-color 0.3s;\r\n//   background-color: #FFFFFF;\r\n\r\n//   &:hover {\r\n//     background-color: #E2EDD08C;\r\n//   }\r\n// `;\r\n\r\n// const Span = styled.span`\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   width: 100%;\r\n//   height: 100%;\r\n//   background-color: ${({ isDragging }) => (isDragging ? '#F5F5F5' : 'transparent')};\r\n//   transition: background-color 0.3s ease;\r\n// `;\r\n\r\n// const ProgressContainer = styled.div`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: space-between;\r\n//   width: 1100px;\r\n//   margin-top: 20px;\r\n// `;\r\n\r\n// const ProgressBar = styled.div`\r\n//   flex-grow: 1;\r\n//   height: 30px;\r\n//   background-color: #fff;\r\n//   border-radius: 5px;\r\n//   margin-right: 10px;\r\n// `;\r\n\r\n// const ProgressFill = styled.div`\r\n//   height: 100%;\r\n//   width: ${({ progress }) => `${progress}%`};\r\n//   background-color: #76c7c0;\r\n//   border-radius: 5px;\r\n//   transition: width 0.3s ease;\r\n// `;\r\n\r\n// const ProgressText = styled.span`\r\n//   font-size: 16px;\r\n// `;\r\n\r\n// // Основной компонент для загрузки файла с прогресс-баром\r\n// const FileUploader = ({ file, setFile }) => {\r\n//   const [isDragging, setIsDragging] = useState(false);\r\n//   const [progress, setProgress] = useState(0); // Состояние для отслеживания прогресса\r\n//   const [isUploading, setIsUploading] = useState(false); // Состояние загрузки файла\r\n\r\n//   const handleChange = (e) => {\r\n//     if (e.target.files && e.target.files[0]) {\r\n//       setFile(e.target.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   const handleDragEnter = (e) => {\r\n//     e.preventDefault();\r\n//     setIsDragging(true);\r\n//   };\r\n\r\n//   const handleDragLeave = () => {\r\n//     setIsDragging(false);\r\n//   };\r\n\r\n//   const handleDrop = (e) => {\r\n//     e.preventDefault();\r\n//     setIsDragging(false);\r\n\r\n//     if (e.dataTransfer.files && e.dataTransfer.files[0]) {\r\n//       setFile(e.dataTransfer.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   // Функция для отправки файла и отслеживания прогресса\r\n//   const handleSubmit = async () => {\r\n//     if (file) {\r\n//       setIsUploading(true); // Установка состояния загрузки файла\r\n\r\n//       // Используем FormData для передачи файла напрямую\r\n//       const formData = new FormData();\r\n//       formData.append('file', file);\r\n\r\n//       // Используем XMLHttpRequest для отслеживания прогресса загрузки\r\n//       const xhr = new XMLHttpRequest();\r\n//       xhr.open('POST', 'http://0.0.0.0:8002/check/1', true);\r\n\r\n//       // Отслеживание прогресса загрузки\r\n//       xhr.upload.onprogress = (event) => {\r\n//         if (event.lengthComputable) {\r\n//           const percentComplete = Math.round((event.loaded / event.total) * 100);\r\n//           setProgress(percentComplete); // Установка процента выполнения\r\n//         }\r\n//       };\r\n\r\n//       // Обработка завершения загрузки\r\n//       xhr.onload = () => {\r\n//         setIsUploading(false); // Завершение загрузки\r\n//         if (xhr.status === 200) {\r\n//           console.log('Загрузка успешна:', xhr.responseText);\r\n//         } else {\r\n//           console.error('Ошибка загрузки:', xhr.statusText);\r\n//         }\r\n//       };\r\n\r\n//       xhr.onerror = () => {\r\n//         setIsUploading(false); // Ошибка при загрузке\r\n//         console.error('Ошибка загрузки');\r\n//       };\r\n\r\n//       xhr.send(formData); // Отправка файла через FormData\r\n//     } else {\r\n//       alert('Пожалуйста, выберите файл для загрузки.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Form\r\n//       onDragEnter={handleDragEnter}\r\n//       onDragOver={handleDragEnter}\r\n//       onDragLeave={handleDragLeave}\r\n//       onDrop={handleDrop}\r\n//     >\r\n//       <Label htmlFor=\"fileInput\">\r\n//         <Span isDragging={isDragging}>\r\n//           {file ? file.name : 'Загрузите файл'}\r\n//         </Span>\r\n//         <Inpt id=\"fileInput\" type=\"file\" onChange={handleChange} />\r\n//       </Label>\r\n\r\n//       {file && (\r\n//         <ProgressContainer>\r\n//           <ProgressBar>\r\n//             <ProgressFill progress={progress} />\r\n//           </ProgressBar>\r\n//           <ProgressText>{progress}%</ProgressText>\r\n//         </ProgressContainer>\r\n//       )}\r\n\r\n//       <Button\r\n//         type=\"button\"\r\n//         onClick={handleSubmit}\r\n//         disabled={!file || isUploading || progress < 100} // Блокируем кнопку до достижения 100%\r\n//       >\r\n//         {isUploading ? 'Загружается...' : 'Отправить на проверку'}\r\n//       </Button>\r\n//     </Form>\r\n//   );\r\n// };\r\n\r\n// export default FileUploader;\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}