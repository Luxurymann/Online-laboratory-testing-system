{"ast":null,"code":"// import React, { useState } from 'react';\n// import styled from 'styled-components';\n// import { Link, useParams } from 'react-router-dom';\n// import FileUploader from './Button';\n// import base64 from 'base-64';\n\n// // Стили для страницы\n// const Container = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   padding: 20px;\n//   font-family: \"Montserrat\", sans-serif;\n//   align-items: center;\n// `;\n\n// const BlockTask = styled.div`\n//   width: 1248px;\n//   background-color: #D5DEF6;\n//   padding: 30px;\n//   border-radius: 7px;\n// `;\n\n// const BlockTest = styled.div`\n//   width: 1248px;\n//   background-color: #E2EDD0;\n//   padding: 30px;\n//   border-radius: 7px;\n// `;\n\n// const BlockTry = styled.div`\n//   width: 1248px;\n//   background-color: #D9D9D9;\n//   padding: 30px;\n//   border-radius: 7px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// `;\n\n// const Title = styled.h2`\n//   font-size: 16px;\n//   margin-bottom: 10px;\n// `;\n\n// const Text = styled.p`\n//   font-size: 16px;\n//   line-height: 1.5;\n// `;\n\n// const Button = styled.button`\n//   padding: 10px;\n//   width: 1100px;\n//   background-color: white;\n//   border-style: none;\n//   border-radius: 7px;\n//   font-family: \"Montserrat\";\n//   font-size: 16px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n\n//   &:hover {\n//     background: #E2EDD0;\n//     color: #000;\n//     transition: 0.3s;\n//   }\n// `;\n\n// const StyledLink = styled(Link)`\n//   text-decoration: none;  // Убираем подчеркивание\n// `;\n\n// // Компонент страницы с блоками\n// const LabaStud = () => {\n//   const [file, setFile] = useState(null);\n//   const { id } = useParams(); // Получаем id лабораторной\n\n//   const handleSubmit = async () => {\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.readAsArrayBuffer(file);\n//       reader.onload = () => {\n//         const encodedFile = base64.encode(\n//           String.fromCharCode(...new Uint8Array(reader.result))\n//         );\n//         fetch(`http://0.0.0.0:8002/check/1`, {\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           method: 'POST',\n//           body: JSON.stringify({ file: encodedFile }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log('Результаты тестов:', data);\n//           })\n//           .catch((error) => {\n//             console.error('Ошибка:', error);\n//           });\n//       };\n//     } else {\n//       alert('Пожалуйста, выберите файл для загрузки.');\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       {/* Первый блок: Условие задачи */}\n//       <BlockTask>\n//         <Text>\n//           Даны три целых числа. Найдите наибольшее из них (программа должна вывести ровно одно целое число). Под наибольшим в этой задаче понимается число, которое не меньше, чем любое другое.\n//         </Text>\n//         <Text>\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>1<br />2<br />3</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>3</Text>\n//       </BlockTask>\n\n//       {/* Второй блок: Описание тестов */}\n//       <BlockTest>\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\n//         <ul>\n//           <li>Проверка формулы</li>\n//           <br />\n//           <li>Автотесты</li>\n//           <br />\n//           <li>Проверка скорости выполнения</li>\n//           <br />\n//           <li>Проверка чего-нибудь еще</li>\n//         </ul>\n//       </BlockTest>\n\n//       {/* Третий блок */}\n//       <BlockTask>\n//         <Title>Ответ в виде файла:</Title>\n//         <FileUploader file={file} setFile={setFile} onSubmit={handleSubmit} />\n//       </BlockTask>\n\n//       {/* Четвертый блок: кнопка Мои попытки */}\n//       <BlockTry>\n//         <StyledLink to={`/attempts/${id}`}>\n//           <Button>\n//             <Text>Мои попытки</Text>\n//           </Button>\n//         </StyledLink>\n//       </BlockTry>\n//     </Container>\n//   );\n// };\n\n// export default LabaStud;\n\n// import React, { useState } from 'react';\n// import styled from 'styled-components';\n// import { Link, useParams } from 'react-router-dom';\n// import FileUploader from './Button';\n// import base64 from 'base-64';\n\n// // Стили для страницы\n// const Container = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   padding: 20px;\n//   font-family: \"Montserrat\", sans-serif;\n//   align-items: center;\n// `;\n\n// const BlockTest = styled.div`\n//   width: 1248px;\n//   background-color: #F0F0F0;\n//   border-radius: 7px;\n// `;\n\n// const BlockTask = styled.div`\n//   width: 1248px;\n//   background-color: #F0F0F0;\n//   padding: 10px;\n//   border-radius: 7px;\n//   margin-top: 10px;\n//   cursor: pointer;\n// `;\n\n// const TitleText = styled.p`\n//   font-size: 20px;\n//   text-align: left;\n//   width: 1250px;\n// `;\n\n// const Title = styled.h1`\n//   font-size: 18px;\n// `;\n\n// const Text = styled.p`\n//   font-size: 16px;\n//   line-height: 1.5;\n// `;\n\n// const Button = styled.button`\n//   padding: 10px;\n//   width: 1100px;\n//   background-color: white;\n//   border-style: none;\n//   border-radius: 7px;\n//   font-family: \"Montserrat\";\n//   font-size: 16px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   margin: 10px 0;\n\n//   &:hover {\n//     background: #E2EDD0;\n//     color: #000;\n//     transition: 0.3s;\n//   }\n// `;\n\n// const ToggleContent = styled.div`\n//   display: ${({ isOpen }) => (isOpen ? 'block' : 'none')};\n//   margin-top: 10px;\n//   background: #D9D9D9;\n//   padding: 15px;\n//   border-radius: 7px;\n// `;\n\n// const LabaStud = () => {\n//   const [file, setFile] = useState(null);\n//   const [openTask1, setOpenTask1] = useState(false);\n//   const [openTask2, setOpenTask2] = useState(false);\n//   const [openTask3, setOpenTask3] = useState(false);\n//   const { id } = useParams(); // Получаем id лабораторной\n\n//   const handleSubmit = async () => {\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.readAsArrayBuffer(file);\n//       reader.onload = () => {\n//         const encodedFile = base64.encode(\n//           String.fromCharCode(...new Uint8Array(reader.result))\n//         );\n//         fetch(`http://0.0.0.0:8002/check/1`, {\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           method: 'POST',\n//           body: JSON.stringify({ file: encodedFile }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log('Результаты тестов:', data);\n//           })\n//           .catch((error) => {\n//             console.error('Ошибка:', error);\n//           });\n//       };\n//     } else {\n//       alert('Пожалуйста, выберите файл для загрузки.');\n//     }\n//   };\n\n//   const handleSaveDraft = () => {\n//     // Логика сохранения черновика\n//     alert('Черновик сохранен!');\n//   };\n\n//   return (\n//     <Container>\n//       {/* Заголовок лабораторной работы */}\n//       <TitleText>Лабораторная работа №{id}: “Наибольшее из трех чисел”</TitleText>\n\n//       {/* Блок: Описание тестов */}\n//       <BlockTest>\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\n//         <ul>\n//           <li>Проверка формулы</li>\n//           <br />\n//           <li>Автотесты</li>\n//           <br />\n//           <li>Проверка скорости выполнения</li>\n//           <br />\n//           <li>Проверка чего-нибудь еще</li>\n//         </ul>\n//       </BlockTest>\n\n//       {/* Блок: Задача №1 */}\n//       <BlockTask onClick={() => setOpenTask1(!openTask1)}>\n//         <Text>Задача №1: Найдите наибольшее из трех целых чисел.</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask1}>\n//         <Text>\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>1<br />2<br />3</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>3</Text>\n//       </ToggleContent>\n\n//       {/* Блок: Задача №2 */}\n//       <BlockTask onClick={() => setOpenTask2(!openTask2)}>\n//         <Text>Задача №2: ... (вставьте условие задачи)</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask2}>\n//         <Text>\n//           <strong>Формат входных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>...</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>...</Text>\n//       </ToggleContent>\n\n//       {/* Блок: Задача №3 */}\n//       <BlockTask onClick={() => setOpenTask3(!openTask3)}>\n//         <Text>Задача №3: ... (вставьте условие задачи)</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask3}>\n//         <Text>\n//           <strong>Формат входных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>...</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>...</Text>\n//       </ToggleContent>\n\n//       {/* Кнопки \"Отправить на проверку\" и \"Сохранить черновик\" */}\n//       <BlockTest>\n//         <Button onClick={handleSubmit}>Отправить на проверку</Button>\n//         <Button onClick={handleSaveDraft}>Сохранить черновик</Button>\n//       </BlockTest>\n//     </Container>\n//   );\n// };\n\n// export default LabaStud;\n\n// import React, { useState } from 'react';\n// import styled from 'styled-components';\n// import { Link, useParams } from 'react-router-dom';\n// import FileUploader from './Button';\n// import base64 from 'base-64';\n\n// // Стили для страницы\n// const Container = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   padding: 20px;\n//   font-family: \"Montserrat\", sans-serif;\n//   align-items: center;\n// `;\n\n// const BlockTest = styled.div`\n//   width: 1248px;\n//   background-color: #F0F0F0;\n//   border-radius: 7px;\n// `;\n\n// const BlockTask = styled.div`\n//   width: 1248px;\n//   background-color: ${({ isOpen }) => (isOpen ? '#D9D9D9' : '#F0F0F0')};\n//   padding: 10px;\n//   border-radius: 7px;\n//   margin-top: 10px;\n//   cursor: pointer;\n// `;\n\n// const TitleText = styled.p`\n//   font-size: 20px;\n//   text-align: left;\n//   width: 1250px;\n// `;\n\n// const Title = styled.h1`\n//   font-size: 18px;\n// `;\n\n// const Text = styled.p`\n//   font-size: 16px;\n//   line-height: 1.5;\n// `;\n\n// const Button = styled.button`\n//   padding: 10px;\n//   width: 1100px;\n//   background-color: white;\n//   border-style: none;\n//   border-radius: 7px;\n//   font-family: \"Montserrat\";\n//   font-size: 16px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   margin: 10px 0;\n\n//   &:hover {\n//     background: #E2EDD0;\n//     color: #000;\n//     transition: 0.3s;\n//   }\n// `;\n\n// const ToggleContent = styled.div`\n//   display: ${({ isOpen }) => (isOpen ? 'block' : 'none')};\n//   background: #D9D9D9;\n//   padding: 15px;\n//   border-radius: 7px;\n// `;\n\n// const LabaStud = () => {\n//   const [file, setFile] = useState(null);\n//   const [openTask1, setOpenTask1] = useState(false);\n//   const [openTask2, setOpenTask2] = useState(false);\n//   const [openTask3, setOpenTask3] = useState(false);\n//   const { id } = useParams(); // Получаем id лабораторной\n\n//   const handleSubmit = async () => {\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.readAsArrayBuffer(file);\n//       reader.onload = () => {\n//         const encodedFile = base64.encode(\n//           String.fromCharCode(...new Uint8Array(reader.result))\n//         );\n//         fetch(`http://0.0.0.0:8002/check/1`, {\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           method: 'POST',\n//           body: JSON.stringify({ file: encodedFile }),\n//         })\n//           .then((response) => response.json())\n//           .then((data) => {\n//             console.log('Результаты тестов:', data);\n//           })\n//           .catch((error) => {\n//             console.error('Ошибка:', error);\n//           });\n//       };\n//     } else {\n//       alert('Пожалуйста, выберите файл для загрузки.');\n//     }\n//   };\n\n//   const handleSaveDraft = () => {\n//     // Логика сохранения черновика\n//     alert('Черновик сохранен!');\n//   };\n\n//   return (\n//     <Container>\n//       {/* Заголовок лабораторной работы */}\n//       <TitleText>Лабораторная работа №{id}: “Наибольшее из трех чисел”</TitleText>\n\n//       {/* Блок: Описание тестов */}\n//       <BlockTest>\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\n//         <ul>\n//           <li>Проверка формулы</li>\n//           <br />\n//           <li>Автотесты</li>\n//           <br />\n//           <li>Проверка скорости выполнения</li>\n//           <br />\n//           <li>Проверка чего-нибудь еще</li>\n//         </ul>\n//       </BlockTest>\n\n//       {/* Блок: Задача №1 */}\n//       <BlockTask onClick={() => setOpenTask1(!openTask1)} isOpen={openTask1}>\n//         <Text>Задача №1: Найдите наибольшее из трех целых чисел.</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask1}>\n//         <Text>\n//         Даны три целых числа. Найдите наибольшее из них (программа должна вывести ровно одно целое число). <br />Под наибольшим в этой задаче понимается число, которое не меньше, чем любое другое.\n//         </Text>\n//         <Text>\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>1<br />2<br />3</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>3</Text>\n//         <BlockTask>\n//         <Title>Ответ в виде файла:</Title>\n//         <FileUploader file={file} setFile={setFile} onSubmit={handleSubmit} />\n//         </BlockTask>\n//       </ToggleContent>\n\n//       {/* Блок: Задача №2 */}\n//       <BlockTask onClick={() => setOpenTask2(!openTask2)} isOpen={openTask2}>\n//         <Text>Задача №2: ... (вставьте условие задачи)</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask2}>\n//         <Text>\n//           <strong>Формат входных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>...</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>...</Text>\n//       </ToggleContent>\n\n//       {/* Блок: Задача №3 */}\n//       <BlockTask onClick={() => setOpenTask3(!openTask3)} isOpen={openTask3}>\n//         <Text>Задача №3: ... (вставьте условие задачи)</Text>\n//       </BlockTask>\n//       <ToggleContent isOpen={openTask3}>\n//         <Text>\n//           <strong>Формат входных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Формат выходных данных:</strong> ...\n//         </Text>\n//         <Text>\n//           <strong>Sample Input:</strong>\n//         </Text>\n//         <Text>...</Text>\n//         <Text>\n//           <strong>Sample Output:</strong>\n//         </Text>\n//         <Text>...</Text>\n//       </ToggleContent>\n\n//       {/* Кнопки \"Отправить на проверку\" и \"Сохранить черновик\" */}\n//       <BlockTest>\n//         <Button onClick={handleSubmit}>Отправить на проверку</Button>\n//         <Button onClick={handleSaveDraft}>Сохранить черновик</Button>\n//       </BlockTest>\n//     </Container>\n//   );\n// };\n\n// export default LabaStud;","map":{"version":3,"names":[],"sources":["C:/Users/polly/Online-laboratory-testing-system/sdo-react-main/sdo/src/pages/LabaStud/index.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import styled from 'styled-components';\r\n// import { Link, useParams } from 'react-router-dom';\r\n// import FileUploader from './Button';\r\n// import base64 from 'base-64';\r\n\r\n// // Стили для страницы\r\n// const Container = styled.div`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   gap: 20px;\r\n//   padding: 20px;\r\n//   font-family: \"Montserrat\", sans-serif;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const BlockTask = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #D5DEF6;\r\n//   padding: 30px;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const BlockTest = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #E2EDD0;\r\n//   padding: 30px;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const BlockTry = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #D9D9D9;\r\n//   padding: 30px;\r\n//   border-radius: 7px;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const Title = styled.h2`\r\n//   font-size: 16px;\r\n//   margin-bottom: 10px;\r\n// `;\r\n\r\n// const Text = styled.p`\r\n//   font-size: 16px;\r\n//   line-height: 1.5;\r\n// `;\r\n\r\n// const Button = styled.button`\r\n//   padding: 10px;\r\n//   width: 1100px;\r\n//   background-color: white;\r\n//   border-style: none;\r\n//   border-radius: 7px;\r\n//   font-family: \"Montserrat\";\r\n//   font-size: 16px;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n\r\n//   &:hover {\r\n//     background: #E2EDD0;\r\n//     color: #000;\r\n//     transition: 0.3s;\r\n//   }\r\n// `;\r\n\r\n// const StyledLink = styled(Link)`\r\n//   text-decoration: none;  // Убираем подчеркивание\r\n// `;\r\n\r\n// // Компонент страницы с блоками\r\n// const LabaStud = () => {\r\n//   const [file, setFile] = useState(null);\r\n//   const { id } = useParams(); // Получаем id лабораторной\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (file) {\r\n//       const reader = new FileReader();\r\n//       reader.readAsArrayBuffer(file);\r\n//       reader.onload = () => {\r\n//         const encodedFile = base64.encode(\r\n//           String.fromCharCode(...new Uint8Array(reader.result))\r\n//         );\r\n//         fetch(`http://0.0.0.0:8002/check/1`, {\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           method: 'POST',\r\n//           body: JSON.stringify({ file: encodedFile }),\r\n//         })\r\n//           .then((response) => response.json())\r\n//           .then((data) => {\r\n//             console.log('Результаты тестов:', data);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Ошибка:', error);\r\n//           });\r\n//       };\r\n//     } else {\r\n//       alert('Пожалуйста, выберите файл для загрузки.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {/* Первый блок: Условие задачи */}\r\n//       <BlockTask>\r\n//         <Text>\r\n//           Даны три целых числа. Найдите наибольшее из них (программа должна вывести ровно одно целое число). Под наибольшим в этой задаче понимается число, которое не меньше, чем любое другое.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>1<br />2<br />3</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>3</Text>\r\n//       </BlockTask>\r\n\r\n//       {/* Второй блок: Описание тестов */}\r\n//       <BlockTest>\r\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\r\n//         <ul>\r\n//           <li>Проверка формулы</li>\r\n//           <br />\r\n//           <li>Автотесты</li>\r\n//           <br />\r\n//           <li>Проверка скорости выполнения</li>\r\n//           <br />\r\n//           <li>Проверка чего-нибудь еще</li>\r\n//         </ul>\r\n//       </BlockTest>\r\n\r\n//       {/* Третий блок */}\r\n//       <BlockTask>\r\n//         <Title>Ответ в виде файла:</Title>\r\n//         <FileUploader file={file} setFile={setFile} onSubmit={handleSubmit} />\r\n//       </BlockTask>\r\n\r\n//       {/* Четвертый блок: кнопка Мои попытки */}\r\n//       <BlockTry>\r\n//         <StyledLink to={`/attempts/${id}`}>\r\n//           <Button>\r\n//             <Text>Мои попытки</Text>\r\n//           </Button>\r\n//         </StyledLink>\r\n//       </BlockTry>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default LabaStud;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import styled from 'styled-components';\r\n// import { Link, useParams } from 'react-router-dom';\r\n// import FileUploader from './Button';\r\n// import base64 from 'base-64';\r\n\r\n// // Стили для страницы\r\n// const Container = styled.div`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   gap: 20px;\r\n//   padding: 20px;\r\n//   font-family: \"Montserrat\", sans-serif;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const BlockTest = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #F0F0F0;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const BlockTask = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #F0F0F0;\r\n//   padding: 10px;\r\n//   border-radius: 7px;\r\n//   margin-top: 10px;\r\n//   cursor: pointer;\r\n// `;\r\n\r\n// const TitleText = styled.p`\r\n//   font-size: 20px;\r\n//   text-align: left;\r\n//   width: 1250px;\r\n// `;\r\n\r\n// const Title = styled.h1`\r\n//   font-size: 18px;\r\n// `;\r\n\r\n// const Text = styled.p`\r\n//   font-size: 16px;\r\n//   line-height: 1.5;\r\n// `;\r\n\r\n// const Button = styled.button`\r\n//   padding: 10px;\r\n//   width: 1100px;\r\n//   background-color: white;\r\n//   border-style: none;\r\n//   border-radius: 7px;\r\n//   font-family: \"Montserrat\";\r\n//   font-size: 16px;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   margin: 10px 0;\r\n\r\n//   &:hover {\r\n//     background: #E2EDD0;\r\n//     color: #000;\r\n//     transition: 0.3s;\r\n//   }\r\n// `;\r\n\r\n// const ToggleContent = styled.div`\r\n//   display: ${({ isOpen }) => (isOpen ? 'block' : 'none')};\r\n//   margin-top: 10px;\r\n//   background: #D9D9D9;\r\n//   padding: 15px;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const LabaStud = () => {\r\n//   const [file, setFile] = useState(null);\r\n//   const [openTask1, setOpenTask1] = useState(false);\r\n//   const [openTask2, setOpenTask2] = useState(false);\r\n//   const [openTask3, setOpenTask3] = useState(false);\r\n//   const { id } = useParams(); // Получаем id лабораторной\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (file) {\r\n//       const reader = new FileReader();\r\n//       reader.readAsArrayBuffer(file);\r\n//       reader.onload = () => {\r\n//         const encodedFile = base64.encode(\r\n//           String.fromCharCode(...new Uint8Array(reader.result))\r\n//         );\r\n//         fetch(`http://0.0.0.0:8002/check/1`, {\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           method: 'POST',\r\n//           body: JSON.stringify({ file: encodedFile }),\r\n//         })\r\n//           .then((response) => response.json())\r\n//           .then((data) => {\r\n//             console.log('Результаты тестов:', data);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Ошибка:', error);\r\n//           });\r\n//       };\r\n//     } else {\r\n//       alert('Пожалуйста, выберите файл для загрузки.');\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveDraft = () => {\r\n//     // Логика сохранения черновика\r\n//     alert('Черновик сохранен!');\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {/* Заголовок лабораторной работы */}\r\n//       <TitleText>Лабораторная работа №{id}: “Наибольшее из трех чисел”</TitleText>\r\n\r\n//       {/* Блок: Описание тестов */}\r\n//       <BlockTest>\r\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\r\n//         <ul>\r\n//           <li>Проверка формулы</li>\r\n//           <br />\r\n//           <li>Автотесты</li>\r\n//           <br />\r\n//           <li>Проверка скорости выполнения</li>\r\n//           <br />\r\n//           <li>Проверка чего-нибудь еще</li>\r\n//         </ul>\r\n//       </BlockTest>\r\n\r\n//       {/* Блок: Задача №1 */}\r\n//       <BlockTask onClick={() => setOpenTask1(!openTask1)}>\r\n//         <Text>Задача №1: Найдите наибольшее из трех целых чисел.</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask1}>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>1<br />2<br />3</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>3</Text>\r\n//       </ToggleContent>\r\n\r\n//       {/* Блок: Задача №2 */}\r\n//       <BlockTask onClick={() => setOpenTask2(!openTask2)}>\r\n//         <Text>Задача №2: ... (вставьте условие задачи)</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask2}>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//       </ToggleContent>\r\n\r\n//       {/* Блок: Задача №3 */}\r\n//       <BlockTask onClick={() => setOpenTask3(!openTask3)}>\r\n//         <Text>Задача №3: ... (вставьте условие задачи)</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask3}>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//       </ToggleContent>\r\n\r\n//       {/* Кнопки \"Отправить на проверку\" и \"Сохранить черновик\" */}\r\n//       <BlockTest>\r\n//         <Button onClick={handleSubmit}>Отправить на проверку</Button>\r\n//         <Button onClick={handleSaveDraft}>Сохранить черновик</Button>\r\n//       </BlockTest>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default LabaStud;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import styled from 'styled-components';\r\n// import { Link, useParams } from 'react-router-dom';\r\n// import FileUploader from './Button';\r\n// import base64 from 'base-64';\r\n\r\n// // Стили для страницы\r\n// const Container = styled.div`\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   gap: 20px;\r\n//   padding: 20px;\r\n//   font-family: \"Montserrat\", sans-serif;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const BlockTest = styled.div`\r\n//   width: 1248px;\r\n//   background-color: #F0F0F0;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const BlockTask = styled.div`\r\n//   width: 1248px;\r\n//   background-color: ${({ isOpen }) => (isOpen ? '#D9D9D9' : '#F0F0F0')};\r\n//   padding: 10px;\r\n//   border-radius: 7px;\r\n//   margin-top: 10px;\r\n//   cursor: pointer;\r\n// `;\r\n\r\n// const TitleText = styled.p`\r\n//   font-size: 20px;\r\n//   text-align: left;\r\n//   width: 1250px;\r\n// `;\r\n\r\n// const Title = styled.h1`\r\n//   font-size: 18px;\r\n// `;\r\n\r\n// const Text = styled.p`\r\n//   font-size: 16px;\r\n//   line-height: 1.5;\r\n// `;\r\n\r\n// const Button = styled.button`\r\n//   padding: 10px;\r\n//   width: 1100px;\r\n//   background-color: white;\r\n//   border-style: none;\r\n//   border-radius: 7px;\r\n//   font-family: \"Montserrat\";\r\n//   font-size: 16px;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   margin: 10px 0;\r\n\r\n//   &:hover {\r\n//     background: #E2EDD0;\r\n//     color: #000;\r\n//     transition: 0.3s;\r\n//   }\r\n// `;\r\n\r\n// const ToggleContent = styled.div`\r\n//   display: ${({ isOpen }) => (isOpen ? 'block' : 'none')};\r\n//   background: #D9D9D9;\r\n//   padding: 15px;\r\n//   border-radius: 7px;\r\n// `;\r\n\r\n// const LabaStud = () => {\r\n//   const [file, setFile] = useState(null);\r\n//   const [openTask1, setOpenTask1] = useState(false);\r\n//   const [openTask2, setOpenTask2] = useState(false);\r\n//   const [openTask3, setOpenTask3] = useState(false);\r\n//   const { id } = useParams(); // Получаем id лабораторной\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (file) {\r\n//       const reader = new FileReader();\r\n//       reader.readAsArrayBuffer(file);\r\n//       reader.onload = () => {\r\n//         const encodedFile = base64.encode(\r\n//           String.fromCharCode(...new Uint8Array(reader.result))\r\n//         );\r\n//         fetch(`http://0.0.0.0:8002/check/1`, {\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           method: 'POST',\r\n//           body: JSON.stringify({ file: encodedFile }),\r\n//         })\r\n//           .then((response) => response.json())\r\n//           .then((data) => {\r\n//             console.log('Результаты тестов:', data);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Ошибка:', error);\r\n//           });\r\n//       };\r\n//     } else {\r\n//       alert('Пожалуйста, выберите файл для загрузки.');\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveDraft = () => {\r\n//     // Логика сохранения черновика\r\n//     alert('Черновик сохранен!');\r\n//   };\r\n\r\n//   return (\r\n//     <Container>\r\n//       {/* Заголовок лабораторной работы */}\r\n//       <TitleText>Лабораторная работа №{id}: “Наибольшее из трех чисел”</TitleText>\r\n\r\n//       {/* Блок: Описание тестов */}\r\n//       <BlockTest>\r\n//         <Title>Типы тестов, используемые в данной лабораторной работе:</Title>\r\n//         <ul>\r\n//           <li>Проверка формулы</li>\r\n//           <br />\r\n//           <li>Автотесты</li>\r\n//           <br />\r\n//           <li>Проверка скорости выполнения</li>\r\n//           <br />\r\n//           <li>Проверка чего-нибудь еще</li>\r\n//         </ul>\r\n//       </BlockTest>\r\n\r\n//       {/* Блок: Задача №1 */}\r\n//       <BlockTask onClick={() => setOpenTask1(!openTask1)} isOpen={openTask1}>\r\n//         <Text>Задача №1: Найдите наибольшее из трех целых чисел.</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask1}>\r\n//         <Text>\r\n//         Даны три целых числа. Найдите наибольшее из них (программа должна вывести ровно одно целое число). <br />Под наибольшим в этой задаче понимается число, которое не меньше, чем любое другое.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> Вводятся три числа.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> Выведите ответ на задачу.\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>1<br />2<br />3</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>3</Text>\r\n//         <BlockTask>\r\n//         <Title>Ответ в виде файла:</Title>\r\n//         <FileUploader file={file} setFile={setFile} onSubmit={handleSubmit} />\r\n//         </BlockTask>\r\n//       </ToggleContent>\r\n\r\n//       {/* Блок: Задача №2 */}\r\n//       <BlockTask onClick={() => setOpenTask2(!openTask2)} isOpen={openTask2}>\r\n//         <Text>Задача №2: ... (вставьте условие задачи)</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask2}>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//       </ToggleContent>\r\n\r\n//       {/* Блок: Задача №3 */}\r\n//       <BlockTask onClick={() => setOpenTask3(!openTask3)} isOpen={openTask3}>\r\n//         <Text>Задача №3: ... (вставьте условие задачи)</Text>\r\n//       </BlockTask>\r\n//       <ToggleContent isOpen={openTask3}>\r\n//         <Text>\r\n//           <strong>Формат входных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Формат выходных данных:</strong> ...\r\n//         </Text>\r\n//         <Text>\r\n//           <strong>Sample Input:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//         <Text>\r\n//           <strong>Sample Output:</strong>\r\n//         </Text>\r\n//         <Text>...</Text>\r\n//       </ToggleContent>\r\n\r\n//       {/* Кнопки \"Отправить на проверку\" и \"Сохранить черновик\" */}\r\n//       <BlockTest>\r\n//         <Button onClick={handleSubmit}>Отправить на проверку</Button>\r\n//         <Button onClick={handleSaveDraft}>Сохранить черновик</Button>\r\n//       </BlockTest>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default LabaStud;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}